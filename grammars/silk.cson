# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.silk'
name: 'Silk'
fileTypes: [
  'silk'
]
foldingStartMarker: /[\<\{\[]/
foldingStopMarker: /[\>\}\]]/
patterns: [
  {include: '#comment'}
  {include: '#import'}
  {include: '#declaration'}
]
repository: # An array of rules. If you're going to be referencing one bit of code over and over again, stick it here so that you can edit all in one place.

  comment:{
    match:'%.*$',
    name: 'comment.line.percentage'
  }

  import:{
    match:'([a-zA-Z_\\$]*)\\s*(<=|\\|=)\\s*([a-zA-Z_\\$\\/]*)(\\/\\*)?$',
    captures:
      1: name: 'support.function.silk'
      2: name: 'keyword.operator.silk'
      3: patterns: [{include:'#alias'}]
      4: name: 'constant.import.glob.silk'
  }

  declaration:{
    begin:'^([a-zA-Z_\\$]*)\\s*(<=|\\|=)'
    beginCaptures:
      1: name: 'support.function.silk'
      2: name: 'keyword.operator.silk'
    end:'\\n'
    endCaptures:
      1: patterns: {include: '$base'}

    patterns:[
      {include: '#value'}
    ]

  }

  alias:{
    name: 'constant.alias'
    match:'(\\/?)([a-zA-Z_\\$]*(?:\\/[a-zA-Z_\\$]+)*)'
  }

  value:{
    name:'value'
    patterns:[
      {include: '#string_double'}
      {include: '#string_single'}
      {include: '#boolean'}
      {include: '#symbol'}
      {include: '#number'}
      {include: '#template'}
      {include: '#comment'}
      {include: '#reference'}
      {include: '#portal'}
      {include: '#construct'}
      {include: '#chain'}
      {include: '#visor'}
      {include: '#operation'}
    ]
  }

  operation:
    begin: '(\\()'
    end: '(\\))'
    name: 'meta.operation'
    patterns:[
      {match: '\\*|\\+|\\-|\\%|\\!|\\&|\\||\\=|<=|>=|<|>|/', name: 'keyword.operator'}
      {include: '#value'}
    ]

  construct:{
    begin: '\\{(.*\\|)?',
    end:'(\\|.*)?\\}'
    name: 'meta.construct'
    beginCaptures:
      0: patterns: [{include: '#symbol'}]
    endCaptures:
      0: patterns: [{include: '#symbol'}]

    patterns: [
      include:'#value'
    ]
  }

  visor:{
    begin: '<'
    end: '>'
    name: 'meta.visor'
    patterns: [
      include:'#value'
    ]
  }

  chain:{
    begin: '\\['
    end: '\\]'
    name: 'meta.chain'
    patterns: [
      include: '#value'
    ]
  }

  wing:{
    match:'([a-zA-Z_\\$]+)(?:=([a-zA-Z_\\$]+))?'
    captures:
      1: name: 'variable.parameter.gate.silk'
      2: name: 'variable.parameter.gate.silk'
  }

  number:{
    match: '[0-9]+(:?.[0-9]+)?',
    name:'constant.numeric.silk'
  }

  boolean:{
    match: 'True|False|All|None'
    name: 'constant.language.silk'
  }

  symbol:{
    match: '[a-zA-Z\\$_]+'
    name: 'entity.name.tag'
  }


  reference:{
    match: '/(?:[a-zA-Z\\$_]+|\\*)'
    name: 'support.function'
  }

  portal:{
    match: '(:?[a-zA-Z_\\$]*)(~)([a-zA-Z_\\$]*)'
    name: ''
    captures:
      1: 'keyword.control'
      2: 'variable.parameter'
  }

  string_double:{
    begin: '"',
    end: '"',
    name: 'string.quoted.double'
    patterns:[
      {include: '#string_escape'}
      {include: '#string_field_value'}
      {include: '#string_field'}
    ]
  }

  string_single:{
    begin: "'",
    end: "'",
    name: 'string.quoted.single'
    patterns:[
      {include: '#string_escape'}
      {include: '#string_field_value'}
      {include: '#string_field'}
    ]
  }

  string_escape: {
    match: '\\\\(.)'
    name: 'constant.character.escape'
  }

  string_field_value: {
      name: 'string.template.field'
      match:'\\^\\((.*)\\)'
      captures:
        0 : patterns: [{include:'#value'}]

    }

  string_field: {
    name: 'string.template.field'
    match:'(\\^)([\\w]*)[^\\w]'
    captures:
      0 : name: 'template.token.identifier'
      1 : name: 'identifier'
  }
